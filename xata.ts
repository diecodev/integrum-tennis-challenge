// Generated by Xata Codegen 0.27.0. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "tournaments",
    columns: [
      { name: "name", type: "string", unique: true },
      { name: "enrollees", type: "vector", vector: { dimension: 30 } },
      { name: "status", type: "string", notNull: true, defaultValue: "OPEN" },
      { name: "pricing", type: "int", notNull: true, defaultValue: "50" },
      { name: "imageUrl", type: "string" },
      { name: "description", type: "text" },
    ],
  },
  {
    name: "users",
    columns: [
      {
        name: "imageUrl",
        type: "string",
        notNull: true,
        defaultValue:
          "https://img.clerk.com/eyJ0eXBlIjoiZGVmYXVsdCIsImlpZCI6Imluc18yWThLQlVENVpQOG1DYWVVWGlvSzhBZEJxS3IiLCJyaWQiOiJ1c2VyXzJZOFBhbmdSY0s2clVwTk93WjJrN3FOR0ZiUiIsImluaXRpYWxzIjoiVEEifQ",
      },
      { name: "firstName", type: "string" },
      { name: "lastName", type: "string" },
      { name: "primaryEmail", type: "email", unique: true },
      { name: "role", type: "string", notNull: true, defaultValue: "USER" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Tournaments = InferredTypes["tournaments"];
export type TournamentsRecord = Tournaments & XataRecord;

export type Users = InferredTypes["users"];
export type UsersRecord = Users & XataRecord;

export type DatabaseSchema = {
  tournaments: TournamentsRecord;
  users: UsersRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://Diego-D-az-s-workspace-65k1dc.us-east-1.xata.sh/db/tennis_integrum_challenge",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
